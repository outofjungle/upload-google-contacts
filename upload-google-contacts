#! /usr/bin/env python

from __future__ import print_function
from googleapiclient.discovery import build
from httplib2 import Http
from oauth2client import file, client, tools
from time import sleep

import sys
import argparse
import os.path
import csv
from validate_email import validate_email

SCOPES = 'https://www.googleapis.com/auth/contacts'


def get_service():
    store = file.Storage('token.json')
    creds = store.get()
    if not creds or creds.invalid:
        flow = client.flow_from_clientsecrets('credentials.json', SCOPES)
        creds = tools.run_flow(flow, store)
    service = build('people', 'v1', http=creds.authorize(Http()))
    return service

def create_group(service, group_name):
    body = {
        "contactGroup": {
            "name": group_name
        }
    }

    group = service.contactGroups().create(body=body).execute()
    return group

def create_contact(service, contact, group):
    cntx = {
        "emailAddresses": [
            {
                "value": contact['emailAddress'], 
                "metadata": {
                    "source": {
                        "type": "CONTACT", 
                    }, 
                    "primary": True
                }
            }
        ],
        "names": [
            {
                "givenName": contact['givenName'], 
                "familyName": contact['familyName'], 
                "metadata": {
                    "source": {
                        "type": "CONTACT", 
                    }, 
                    "primary": True
                }
            }
        ]
    }
    
    person = service.people().createContact(body=cntx).execute()

    body = {
        "resourceNamesToAdd": [
            person['resourceName']
        ]
    }

    try:
        service.contactGroups().members().modify(resourceName=group['resourceName'], body=body).execute()
        return True
    except:
        return False
    

def sanitize(record):
    if validate_email(record['Primary Email']) == False:
        return None

    sanitized = {
        'emailAddress': record['Primary Email'],
    }

    if not record['Display Name']:
        sanitized['givenName'] = record['Primary Email'].split('@')[0].strip()
        sanitized['familyName'] = ''
    
    if validate_email(record['Display Name']):
        sanitized['givenName'] = record['Display Name'].split('@')[0].strip()
        sanitized['familyName'] = ''

    splits = record['Display Name'].split(' ', 1)
    sanitized['givenName'] = splits[0].strip()
    
    if len(splits) > 1:
        sanitized['familyName'] = splits[1].strip()
    else:
        sanitized['familyName'] = ''

    return sanitized


# for f in address-books/*; do ./upload-google-contacts --file="$f"; done
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', dest='file', help='path to thunderbird exported csv file')
    args = parser.parse_args()

    file_path = args.file
    group_name = os.path.splitext(os.path.basename(file_path))[0]

    service = get_service()
    group = create_group(service, group_name)

    print('Processing "{}":'.format(file_path), end='')
    sys.stdout.flush()
    with open(file_path) as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=',')
        for record in csv_reader:
            sleep(1)
            contact = sanitize(record)
            if contact:
                if create_contact(service, contact, group):
                    print('.', end='')
                else:
                    print('*', end='')
                sys.stdout.flush()
    print('')
                
            